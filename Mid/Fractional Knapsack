Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

 

Example 1:

Input:
N = 3, W = 50
values[] = {60,100,120}
weight[] = {10,20,30}
Output:
240.00
Explanation:Total maximum value of item
we can have is 240.00 from the given
capacity of sack. 
Example 2:

Input:
N = 2, W = 50
values[] = {60,100}
weight[] = {10,20}
Output:
160.00
Explanation:
Total maximum value of item
we can have is 160.00 from the given
capacity of sack.



/*
class Item {
    int value, weight;
    Item(int x, int y){
        this.value = x;
        this.weight = y;
    }
}
*/
class mycomparator implements Comparator<Item>
{
    @Override public int compare( Item i1, Item i2)
    {
        double val1= new Double((double)i1.value / (double)i1.weight);
        double val2= new Double((double)i2.value / (double)i2.weight);
        
         if (val1 < val2)
                    return 1;
                else
                    return -1;
    }
}


class Solution
{
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n) 
    {
        // Your code here
        mycomparator mc =new mycomparator();
        Arrays.sort(arr,mc);
        double total=0d;

        for(int i=0;i<arr.length;i++)
        {
            int currwt=(int)arr[i].weight;
            int currval=(int)arr[i].value;
            
            if(W-currwt>=0)
            {
                W=W-currwt;
                total=total+currval;
            }
            else
            {
                double fraction=((double)W / (double)currwt);
                total=total+(currval*fraction);
                W=(int)(W-(currwt*fraction));
                break;
            }
        }
        
        return total;
        
        
    }
}
