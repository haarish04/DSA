Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]

class Solution {
    public List<List<Integer>> combinationSum2(int[] nums, int target) {
        List<List<Integer>> ans= new ArrayList<>();
        Arrays.sort(nums);
        backtrack(ans,new ArrayList<Integer>(),nums,target,0);
        return ans;
    }

    public void backtrack(List<List<Integer>> ans,List<Integer> temp, int[] nums, int target, int i)
    {
        if(target<0)
            return;
        
        else if(target==0)
            ans.add(new ArrayList<>(temp));
        
        else
        {
            for(int start=i;start<nums.length;++start)
            {
                if(start>i && nums[start]==nums[start-1])
                    continue;
                temp.add(nums[start]);
                backtrack(ans,temp,nums,target-nums[start],start+1);
                temp.remove(temp.size()-1);
            }
        }
    }
}
