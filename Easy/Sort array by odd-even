Given an integer array nums, move all the even integers at the beginning of the array followed by all the odd integers.

Return any array that satisfies this condition.

Example 1:

Input: nums = [3,1,2,4]
Output: [2,4,3,1]
Explanation: The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.
Example 2:

Input: nums = [0]
Output: [0]

class Solution {
    public int[] sortArrayByParity(int[] nums) {
        int mid=0;
        int low=0;
        int high=nums.length-1;

        while(mid<=high)
        {
            if(nums[mid]%2==0 || nums[mid]==0)
            {
                swap(nums,low,mid);
                low++;
                mid++;
            }
            else if(nums[mid]%2!=0)
            {
                swap(nums,mid,high);
                high--;
            }
        }
        return nums;
    }

    public static void swap(int[] nums, int a, int b)
    {
        int temp= nums[a];
        nums[a]=nums[b];
        nums[b]=temp;
    }
}
