Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]

class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> ans= new ArrayList<>();
        backtrack(ans, new ArrayList<>(), s,0);
        return ans;
    }

    void backtrack(List<List<String>> ans, List<String> temp, String s, int start)
    {
        if(start==s.length())
            ans.add(new ArrayList<>(temp));
        else
        {
            for(int i=start;i<s.length();i++)
            {
                if(checkPalindrome(s,start,i))
                {
                    temp.add(s.substring(start,i+1));
                    backtrack(ans,temp,s,i+1);
                    temp.remove(temp.size()-1);
                }
            }
        }

    }

    boolean checkPalindrome(String s, int low, int high)
    {
        while(low<high)
        {
            if(s.charAt(low++)!=s.charAt(high--))
                return false;

        }
        return true;
    }
}
