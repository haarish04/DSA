Given a string s, return the 
lexicographically smallest
 
subsequence of s that contains all the distinct characters of s exactly once.

Example 1:

Input: s = "bcabc"
Output: "abc"
Example 2:

Input: s = "cbacdcbc"
Output: "acdb"

class Solution {
    public String smallestSubsequence(String s) {
        int [] last= new int[26];
        boolean[] seen= new boolean[26];
        Stack <Integer> st = new Stack<>();

        for(int i=0;i<s.length();i++)
        {
            last[s.charAt(i)-'a']=i;
        }

        for(int i=0;i<s.length();i++)
        {
            int curr= s.charAt(i)-'a';

            if(seen[curr]==true)
                continue;
            
            while(!st.isEmpty() && curr < st.peek() && i< last[st.peek()])
            {
                seen[st.pop()]=false;
            }
            st.push(curr);
            seen[curr]=true;
        
        }
        StringBuilder sb= new StringBuilder();

        while(!st.isEmpty())
            sb.append((char)(st.pop()+'a'));
        
        return sb.reverse().toString();
    }
        
    
}
