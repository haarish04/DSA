Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List <List<Integer>> ans= new ArrayList<>();
        backtrack(ans, new ArrayList(), nums);
        
        return ans;
    }

    public void backtrack( List<List<Integer>> ans, List<Integer> temp, int[] nums)
    {
        if(temp.size()==nums.length)
        {
            ans.add(new ArrayList<>(temp));

        }

        else
        {
            for( int i=0;i<nums.length;i++)
            {
                if(temp.contains(nums[i]))
                    continue;
                
                temp.add(nums[i]);
                backtrack(ans,temp,nums);
                temp.remove(temp.size()-1);
            }
        }
    }
}
