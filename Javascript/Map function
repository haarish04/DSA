Given an integer array arr and a mapping function fn, return a new array with a transformation applied to each element.
The returned array should be created such that returnedArray[i] = fn(arr[i], i).
Example 1:

Input: arr = [1,2,3], fn = function plusone(n) { return n + 1; }
Output: [2,3,4]
Explanation:
const newArray = map(arr, plusone); // [2,3,4]
The function increases each value in the array by one. 
Example 2:

Input: arr = [1,2,3], fn = function plusI(n, i) { return n + i; }
Output: [1,3,5]
Explanation: The function increases each value by the index it resides in.
Example 3:

Input: arr = [10,20,30], fn = function constant() { return 42; }
Output: [42,42,42]
Explanation: The function always returns 42.
---------------------------------------------------------------------------------------------------------

//array.map(function(currentValue, index, arr), thisValue)
//function()	Required : A function to be run for each array element.
//currentValue	Required : The value of the current element.
//index	Optional : The index of the current element.
//arr	Optional : The array of the current element.


var map = function(arr, fn) {
     return arr.map((element, index) => fn(element, index));
};
----------------------------------------------------------------------------------------------------------

Without map, traditional method:

var map = function(arr, fn) {
    ans=[]
    for(i=0;i<arr.length;i++)
    {
        val= fn(arr[i],i)
        ans.push(val)
    }
    return ans;
};
