Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.

 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

---------------Question is tricky and mid becoz of the mistake I made in pop in the popping of minstack-------------------------------------------

class MinStack {
    Stack<Integer> st;
    Stack<Integer> minStack;

    public MinStack()
    {
        st=new Stack<>();
        minStack= new Stack<>();    
    }
    
    public void push(int val) {
        st.push(val);
        val=Math.min(val,minStack.isEmpty() ? val:minStack.peek());
        minStack.push(val);
    }
    
    public void pop()
    {
        //if(minStack.peek()==st.peek()) is not needed because with every push statement we are pushing the respective min element, so if 0 is min and we pusing 3, we are pushing 0 again and not null therefore dont need to check and direct pop
        minStack.pop();
        st.pop();    
    }
    
    public int top()
    {
        return st.peek();    
    }
    
    public int getMin()
    {
        return minStack.peek();    
    }
}
