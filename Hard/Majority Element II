Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]

class Solution {
    public List<Integer> majorityElement(int[] nums) {

     List<Integer> res= new ArrayList<>();
     int ans1=Integer.MAX_VALUE;
     int ans2=Integer.MIN_VALUE;
     int c1=0;
     int c2=0;

     for(int i=0;i<nums.length;i++)
     {
        if(nums[i]==ans1)
            c1++;
        
        else if( nums[i]==ans2)
            c2++;

        else if(c1==0)
        {
            ans1=nums[i];
            c1++;
        }

        else if(c2==0)
        {
            ans2=nums[i];
            c2++;
        }

        else
        {
            c1--;
            c2--;
        }

     }

     c1=0;
     c2=0;

     for(int i=0;i<nums.length;i++)
     {
         if(nums[i]==ans1)
            c1++;

        else if(nums[i]==ans2)
            c2++;

     }

     if(c1>nums.length/3)
        res.add(ans1);

     if(c2>nums.length/3)
        res.add(ans2);
    
     return res;

    }
   
}
