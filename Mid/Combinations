Given two integers n and k, return all possible combinations of k numbers chosen from the range [1, n].

You may return the answer in any order.
Example 1:

Input: n = 4, k = 2
Output: [[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]]
Explanation: There are 4 choose 2 = 6 total combinations.
Note that combinations are unordered, i.e., [1,2] and [2,1] are considered to be the same combination.
Example 2:

Input: n = 1, k = 1
Output: [[1]]
Explanation: There is 1 choose 1 = 1 total combination.

class Solution {
    public List<List<Integer>> ans= new ArrayList<>();
    public List<List<Integer>> combine(int n, int k) {
        combinations(new ArrayList<>(),n,k,n);
        return ans;
    }

    private void combinations(List<Integer> temp, int n, int k, int i)
    {
        if(k==0)
        {   ans.add(new ArrayList<>(temp));
            return;
        }
        for(int start=i;start>0;--start)
        {
            temp.add(start);
            combinations(temp,n-1,k-1,start-1);
            temp.remove(temp.size()-1);
        }

    }
}
